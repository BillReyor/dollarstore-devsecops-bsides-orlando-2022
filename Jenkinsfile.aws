pipeline {
    agent any

    environment {
       CHECKOV_API_KEY = credentials('checkov-api-key')
    }

    stages {
        stage('Execute Scans') {
            stages {
                stage ('Execute CLOC scan'){
                    steps {
                        echo 'Executing CLOC'
                        script {
                            docker.image('aldanial/cloc:latest').inside("--entrypoint=''") {
                                sh '/usr/src/cloc ./php'
                            }
                        }
                    }
                }
                stage ('Execute Checkov Scan'){
                    steps {
                        echo 'Executing Checkov Scan'
                        script {
                            docker.image('bridgecrew/checkov:latest').inside("--entrypoint=''") {
                                try {
                                    sh 'checkov -d . --bc-api-key $CHECKOV_API_KEY --skip-framework sca_image --skip-check CKV_DOCKER*,CKV_SECRET_6 --use-enforcement-rules -o cli -o junitxml --output-file-path console,results.xml'
                                    junit skipPublishingChecks: true, testResults: 'results.xml'
                                } catch (err) {
                                    junit skipPublishingChecks: true, testResults: 'results.xml'
                                    throw err
                                }
                            }
                        }
                    }
                }
                stage ('Execute PHPMetrics Scan'){
                    steps {
                        echo 'Executing PHPMetrics'
                        script {
                            docker.image('herloct/phpmetrics:latest').inside("--entrypoint=''") {
                                try {
                                    sh 'phpmetrics --config=config.yml ./php'
                                    junit skipPublishingChecks: true, testResults: 'results.xml'
                                } catch (err) {
                                    junit skipPublishingChecks: true, testResults: 'results.xml'
                                    throw err
                                }
                            }
                        }
                    }
                }
                stage ('Executing Tartufo Scan'){
                    steps {
                        echo 'Executing Tartufo'
                        script {
                            docker.image('godaddy/tartufo:latest').inside("--entrypoint=''") {
                                try{
                                    sh '/venv/bin/tartufo -of json -od ./tartufo_results scan-local-repo .'
                                } catch (err) {
                                    throw err
                                }
                                    
                            }
                        }
                    }
                }
                stage ('Executing Git Secrets Scan'){
                    steps {
                        echo 'Executing Git Secrets'
                        script {
                            docker.image('moduscreate/alpine-git-secrets:1.1').inside("--entrypoint=''") {
                                try{
                                    sh '''
                                       git secrets --install -f
                                       git secrets --register-aws
                                       git secrets --scan
                                       ''' 
                                } catch (err) {
                                    throw err
                                }
                                    
                            }
                        }
                    }
                }
                stage ('Executing Horusec Scan'){
                    steps {
                        echo 'Executing Horusec Scans'
                        script {
                            docker.image('horuszup/horusec-cli:latest').inside("--entrypoint=''") {
                                try{
                                    sh '''
                                       horusec start -p ./ --disable-docker="true"
                                       ''' 
                                } catch (err) {
                                    throw err
                                }
                                    
                            }
                        }
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying PHP App'
            }
        }
    }
}
